* Работа с версиями файлов
В большинстве случаев работа на компьютере заключается в манипуляциях
с информацией. Информация в виде документов, изображений и прочего
хранится в файлах или базах данных (что по сути та же файловая система
только с особым языком запросов). Мы будем рассматривать только
текстовые файлы как наиболее простые.

В большинстве проектов возникает ситуация когда разработчик создающий
программы, разрабатывающий конструкторскую документацию, стандарты,
... приходит к ситуации, когда:
- требуется создать новую версию, которую необходимо поддерживать
  параллельно с основной
- необходимо обеспечить резервное копирование
- удалённая работа
- разработка не может продолжаться в одиночку (проект стал слишком
  большим) и дальнейшая разработка будет идти в коллективе
- необходимо регулярно отчитаться о проделанной работе

** Без копий *линейное* редактирование:
единственная версия хранится на флэшке до потери/поломки флэшки и
потом всё начинается заново: единственная версия хранится на флэшке до
потери/поломки флэшки и потом всё начинается заново: единс...

** Коллективное *линейное* редактирование:
Если документ редактируется линейно, и включена "история изменений" в
текстовом процессоре (MS|Libre|Open)Office то всё достаточно просто:
Первый редактирует документ. Другие ждут (они ведь не знают что он там
напишет). Потом второй принимает/не_принимает изменения внесённые
первым и опять редактирует документ. Другие ждут. Первый
принимает/не_принимает изменения внесённые вторым и опять редактирует
документ. Остальные ждут. Третий берётся подправить документ ... И
пусть весь мир подождёт.

Суть такова: пока один работает над документом остальные ждут для
соблюдения линейности.

** Пример *нелинейного* редактирования
Пока ещё дружный коллектив: Иванов, Петров, Сидорова.

Иванов разрабатывал документ и получилось 100 страниц текста пусть
это будет версия A0.  Иванов отдал документ Петрову.  Они
редактировали копии документа A0 одновременно. У Иванова получилась
версия -> A1 в котором изменена первая глава и добавлена третья глава,
у Петрова -> B1 изменения в первой главе и второй главе B1. Собрались
они вместе и сидят думают как им соединить все правки воедино. И тут
появляется Сидорова у которой поменялся почти весь документ
(орфография, пунктуация) C2.


** Ручное управление версиями
- 00
- 01 заработало
- 2012-02-10
- v0.1 на сервере
- 11-02-12 да
- v2.0 странная
- 12-11-02 копия каталогов
  + v3.0-странная (это таже что и v3.0-глючит ? разобраться!)
  + 02-12-11
  + v2 без картинок в документации
- 12-02-11 неправильная версия но почему то работает
- v2.99 от 02-11-12 - правильная но не работает
- v3.0-глючит
- v3.1-не глючит но не соответствует документации
- 02-12-11 бНОПНЯ
- tmp
- другая временная версия
- 11-12-02
- и ещё десяток писем себе с резервными копиями

Время во многих файлах сбито так как они редактировалось на компьютере
с прокисшей батарейкой и там всегда начало эпохи: 1970-январь-01.



* Определение
"Система управления версиями (от англ.  Version Control System, VCS
или Revision Control System) — программное обеспечение для облегчения
работы с изменяющейся информацией. Система управления версиями
позволяет хранить несколько версий одного и того же документа, при
необходимости возвращаться к более ранним версиям, определять, кто и
когда сделал то или иное изменение, и многое другое.

Такие системы наиболее широко используются при разработке программного
обеспечения для хранения исходных кодов разрабатываемой
программы. Однако они могут с успехом применяться и в других областях,
в которых ведётся работа с большим количеством непрерывно изменяющихся
электронных документов.  В частности, системы управления версиями
применяются в САПР, обычно в составе систем управления данными об
изделии (PDM). Управление версиями используется в инструментах
конфигурационного управления (Software Configuration Management
Tools).

Программное обеспечение Википедии ведёт историю изменений для всех её
статей, используя методы, аналогичные тем, которые применяются в
системах управления версиями."  [[https://ru.wikipedia.org/wiki/Система
управления версиями]]

Свойства VCS:
1. Позволяют создавать разные варианты одного документа (ветки).
2. Предоставляют информацию о авторе, дате и изменениях в файле.
3. Ведут журнал изменений, в который пользователи могут записывать
   пояснения о том, что и почему они изменили в данной версии.
4. Контролируют права доступа пользователей, разрешая или запрещая
   чтение или изменение данных, в зависимости от того, кто запрашивает
   это действие.

* Базовые принципы разработки ПО в VCS

Порядок использования системы управления версиями в каждом конкретном
случае определяется техническими регламентами и правилами, принятыми в
конкретной фирме или организации, разрабатывающей проект. Тем не
менее, общие принципы правильного использования VCS немногочисленны и
едины для любых разработок и систем управления версиями.

[[https://ru.wikipedia.org/wiki/Система управления версиями]]
http://www.git-tower.com/blog/git-cheat-sheet/



1. Текст следует хранить в текстовом файле. К.О.
2. Любые рабочие, тестовые или демонстрационные версии проекта
   собираются только из репозитория системы. «Персональные» сборки,
   включающие ещё незафиксированные изменения, могут делать только
   разработчики для целей промежуточного тестирования. Таким образом,
   гарантируется, что репозиторий содержит всё необходимое для
   создания рабочей версии проекта.
3. Текущая версия главной ветви всегда корректна. Не допускается
   фиксация в главной ветви неполных или не прошедших хотя бы
   предварительное тестирование изменений. В любой момент сборка
   проекта, проведённая из текущей версии, должна быть успешной.
4. Любое значимое изменение должно оформляться как отдельная
   ветвь. Промежуточные результаты работы разработчика фиксируются в
   эту ветвь. После завершения работы над изменением ветвь
   объединяется со стволом.
5. Версии проекта помечаются тегами. 
   #+BEGIN_COMMENT 
   странное:
   Выделенная и помеченная тегом
   версия более никогда не изменяется.
   #+END_COMMENT
6. Kоммитить только связанные изменения.
   Не нужно объединять
   несвязанные коммиты вместе.
7. Пусть коммиты будут небольшого размера. Тогда в них легко разобраться.
8. Не коммитьте недоделки, только потому что кончился рабочий день или
   по другой причине. Каждый коммит должен быть логически
   завершён. Если получается бошьшой объем работы, то лучше разбить на
   несколько маленких коммитов.
9. Тестируйте код перед коммитом. 
10. Пишите хорошие описания для коммитов в повелительном наклонении
    глаголов настоящего времени: Вместо "added", "adding" используйте
    "add".
11. VCS это не система резервного копирования (резервная копия - лишь
    побочный эффект)
12. Используйте ветки для всего: новых идей и версий, исправления
    ошибок ...

коммит / закоммитить
разместить поместить зафиксировать запечатление



* Сравнение VCS и DVCS



* Сравнение систем управления версиями

| Название                           | Разработчик                | Статус разработки                                  | Модель рипозитория            | модель параллелизма (concurrency) | Лицензия    | Поддерживаемые платформы                             | Стоимость                                                                                                                                                             | Специфика                            |
|------------------------------------+----------------------------+----------------------------------------------------+-------------------------------+-----------------------------------+-------------+------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------|
| CVS                                | The CVS Team               | maintained but new features not added              | Client–server                 | Merge                             | GNU GPL     | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
| Subversion (SVN)                   | Apache Software Foundation | actively developed                                 | Client–server                 | Merge or lock                     | Apache      | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
|                                    |                            |                                                    |                               |                                   |             |                                                      |                                                                                                                                                                       |                                      |
| BitKeeper                          | BitMover Inc.              | actively developed                                 | Distributed                   | Merge                             | Proprietary | Unix-like, Windows, OS X                             | Non-free Quoted on an individual basis.                                                                                                                               |                                      |
| darcs                              | The Darcs team             | actively developed                                 | Distributed                   | Merge                             | GNU GPL     | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
| Git                                | Junio Hamano               | actively developed                                 | Distributed                   | Merge                             | GNU GPL     | POSIX, Windows, OS X                                 | Free                                                                                                                                                                  |                                      |
| GNU arch                           | Andy Tai                   | unmaintained                                       | Distributed                   | Merge                             | GNU GPL     | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
| GNU Bazaar                         | Canonical Ltd.             | limited development; latest release August 4, 2013 | Distributed and Client–server | Merge                             | GNU GPL     | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
| Mercurial                          | Matt Mackall               | actively developed                                 | Distributed                   | Merge                             | GNU GPL     | Unix-like, Windows, OS X                             | Free                                                                                                                                                                  |                                      |
|                                    |                            |                                                    |                               |                                   |             |                                                      |                                                                                                                                                                       |                                      |
| PLM (Product Lifecycle Management) | Dassault Systèmes          |                                                    |                               |                                   |             |                                                      |                                                                                                                                                                       | CAD (САПР)                           |
| SWR PDM                            | Solidworks Russia          | https://www.linux.org.ru/forum/talks/11128886      |                               |                                   |             |                                                      |                                                                                                                                                                       | CAD (САПР)                           |
|                                    |                            |                                                    |                               |                                   |             |                                                      |                                                                                                                                                                       |                                      |
| Google Cloud Connect               | Google Docs                | actively developed                                 |                               |                                   | Proprietary | network based (Microsoft Office 2003, 2007 and 2010) | 5GB of Google Drive storage is included for free. Currently, additional storage costs per month are: 25GB-$2.49, 100GB-$4.99, etc. up to 16TB.                        | Microsoft Office 2003, 2007 and 2010 |
| Team Foundation Server™ (TFS)      | Microsoft                  | actively developed                                 | Client–server, Distributed    | Merge or lock                     | Proprietary | Windows, Cross-platform via Visual Studio Online     | Free for up to 5 users in the Visual Studio Online or for open source projects through codeplex.com; else non-free, licensed through MSDN subscription or direct buy. | включает SharePoint™                 |
| Visual SourceSafe™ (VSS)           | Microsoft®                 | serious bug fixes only (2005)                      | Shared Folder                 | Merge or lock                     | Proprietary | Windows                                              | Non-free ~$500 per license or single license included with each MSDN subscription.                                                                                    |                                      |

** git
Сервисы, предоставляющие хостинг для git-репозиториев:
- https://github.com/
- https://gitorious.org/
- https://bitbucket.org/
- https://sourceforge.net/
- http://code.google.com/

* Словарь

Общепринятой терминологии не существует, в разных системах могут
использоваться различные названия для одних и тех же действий. Ниже
приводятся некоторые из наиболее часто используемых
вариантов. Приведены английские термины, в литературе на русском языке
используется тот или иной перевод или транслитерация.

- *branch* Ветвь — направление разработки, независимое от
  других. Ветвь представляет собой копию части (как правило, одного
  каталога) хранилища, в которую можно вносить свои изменения, не
  влияющие на другие ветви. Документы в разных ветвях имеют одинаковую
  историю до точки ветвления и разные — после неё.
- *changeset, changelist, activity* Набор изменений. Представляет
  собой поименованный набор правок, сделанных в локальной копии для
  какой-то общей цели. В системах, поддерживающих наборы правок,
  разработчик может объединять локальные правки в группы и выполнять
  фиксацию логически связанных изменений одной командой, указывая
  требуемый набор правок в качестве параметра. При этом прочие правки
  останутся незафиксированными. Типичный пример: ведётся работа над
  добавлением новой функциональности, а в этот момент обнаруживается
  критическая ошибка, которую необходимо немедленно
  исправить. Разработчик создаёт набор изменений для уже сделанной
  работы и новый — для исправлений. По завершении исправления ошибки
  отдаётся команда фиксации только второго набора правок.
  # stage?
- *check-in, commit, submit* Создание новой версии, фиксация
  изменений. Распространение изменений, сделанных в рабочей копии, на
  хранилище документов. При этом в хранилище создаётся новая версия
  изменённых документов.
- *check-out, clone* Извлечение документа из хранилища и создание
  рабочей копии.
- *conflict* Конфликт — ситуация, когда несколько пользователей
  сделали изменения одного и того же участка документа. Конфликт
  обнаруживается, когда один пользователь зафиксировал свои изменения,
  а второй пытается зафиксировать и система сама не может корректно
  слить конфликтующие изменения. Поскольку программа может быть
  недостаточно разумна для того, чтобы определить, какое изменение
  является «корректным», второму пользователю нужно самому разрешить
  конфликт (resolve).
- *head* Основная версия — самая свежая версия для ветви/ствола,
  находящаяся в хранилище. Сколько ветвей, столько основных версий.
- *merge, integration* Слияние — объединение независимых изменений в
  единую версию документа. Осуществляется, когда два человека изменили
  один и тот же файл или при переносе изменений из одной ветки в
  другую.
- *rebase* Перенос точки ветвления (версии, от которой начинается
  ветвь) на более позднюю версию основной ветви. Например, после
  выпуска версии 1.0 проекта в стволе продолжается доработка
  (исправление ошибок, доработка имеющегося функционала), одновременно
  начинается работа над новой функциональностью в новой ветви. Через
  какое-то время в основной ветви происходит выпуск версии 1.1 (с
  исправлениями); теперь желательно, чтобы ветвь разработки новой
  функциональности включала изменения, произошедшие в стволе. Вообще,
  это можно сделать базовыми средствами, с помощью слияния (merge),
  выделив набор изменений между версиями 1.0 и 1.1 и слив его в
  ветвь. Но при наличии в системе поддержки перебазирования ветви эта
  операция делается проще, одной командой: по команде rebase (с
  параметрами: ветвью и новой базовой версией) система самостоятельно
  определяет нужные наборы изменений и производит их слияние, после
  чего для ветви базовой версией становится версия 1.1; при
  последующем слиянии ветви со стволом система не рассматривает
  повторно изменения, внесённые между версиями 1.0 и 1.1, так как
  ветвь логически считается выделенной после версии 1.1.
- *repository, depot* Хранилище документов — место, где система
  управления версиями хранит все документы вместе с историей их
  изменения и другой служебной информацией.
- *revision* Версия документа. Системы управления версиями различают
  версии по номерам, которые назначаются автоматически.
- *shelving* Откладывание изменений. Предоставляемая некоторыми
  системами возможность создать набор изменений (changeset) и
  сохранить его на сервере без фиксации (commit’а). Отложенный набор
  изменений доступен на чтение другим участникам проекта, но до
  специальной команды не входит в основную ветвь. Поддержка
  откладывания изменений даёт возможность пользователям сохранять
  незавершённые работы на сервере, не создавая для этого отдельных
  ветвей.
- *tag, label* Метка, которую можно присвоить определённой версии
  документа. Метка представляет собой символическое имя для группы
  документов, причём метка описывает не только набор имён файлов, но и
  версию каждого файла. Версии включённых в метку документов могут
  принадлежать разным моментам времени.
- *trunk, mainline, master* Ствол — основная ветвь разработки
  проекта. Политика работы со стволом может отличаться от проекта к
  проекту, но в целом она такова: большинство изменений вносится в
  ствол; если требуется серьёзное изменение, способное привести к
  нестабильности, создаётся ветвь, которая сливается со стволом, когда
  нововведение будет в достаточной мере испытано; перед выпуском
  очередной версии создаётся «релизная» ветвь, в которую вносятся
  только исправления.
- *update, sync* Синхронизация рабочей копии до некоторого заданного
  состояния хранилища. Чаще всего это действие означает обновление
  рабочей копии до самого свежего состояния хранилища. Однако при
  необходимости можно синхронизировать рабочую копию и к более старому
  состоянию, чем текущее.
- *working copy* Рабочая (локальная) копия документов.

[[https://ru.wikipedia.org/wiki/Система управления версиями]]
