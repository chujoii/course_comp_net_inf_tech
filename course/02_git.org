* Краткий справочник
** основная документация о git
https://git-scm.com/book/ru/v2
** в первое время обязательно сделать резервную копию!

** репозиторий git
(история и настройки) в рабочем проекте хранится в каталоге .git

репозиторий git --- это (ориентированный) направленный граф
в котором каждый узел = коммит
стрелочки указывают от потомков к родителям

(новый коммит)<--[ветка master]
 |
 |
 V
(version 2)
 |
 |    (проверка работы нового алгоритма под кодовым названием 123)<--[ветка test_123]
 |     |
 V     V
(изменения базового алгоритма)
 |
 |
 V
(первоначальный коммит)

перед началом работы нужно будет настроить git (как минимум указать Фамилию и Имя --- это нужно для указания авторства)


** посмотреть изменения между файлами в проекте и предыдущей версией:
git diff

** добавить файлы в stage (stage, index --- временное хранилище для файлов подготовленных к коммиту):
git add file.txt a.c a.h ...
git add doc/help.txt file.txt
никогда не добавлять все файлы: "git add ." или "git add *" --- это приведёт к замусориванию (частично проблемму может решить .gitignore)
однако можно добавлять по маске "git add *.c *.h"

** посмотреть изменения между stage (подготовленными файлами) и предыдущей версией:
git diff --staged

** посмотреть статус файлов (вдруг какой-то файл изменился, но его забыли добавить)
в этой команде git подскажет как вынести из stage случайно попавший туда файл (при этом файл останется на диске --- он просто удалится из списка подготовленных файлов)
git status


** коммит (фиксация изменений в дереве git) перемещает файлы из stage (временное хранилище для файлов подготовленных к коммиту) в дерево git.
коммиты (фиксации) желательно делать небольшими.
опция "-v" запускает внешний редактор и позволяет сделать многострочный комментарий (предполагается что первая строка будет меньше (или равна?) 50 символов)
git commit -v
если не хочется запускать внешний редактор то добавить опцию "-m" и "короткое описание изменений в кавычках":
git commit -m 'short commit message'
желательно описания изменений писать в командном стиле, начиная с глагола-приказа:
например, если была добавлена функция чтения бинарных файлов,
то описание изменений будет примерно таким: "Read binary file"

** графическое дерево всех веток (all) отсортированное по времени (date-order)
gitk --all --date-order
** тоже самое дерево, но в текстовой консольке
git log --pretty=format:'%Cgreen%ad%Creset %C(yellow)%h%Creset%C(yellow)%d%Creset %<(50,trunc)%s %C(cyan)[%an]%Creset %Cgreen(%ar)%Creset' --date=iso --branches='*' --graph --decorate --color











** дополнительные функции:

** .gitignore
чтобы случайно не набить репозиторий исходных кодов объектными файлами, текстовыми логами и прочими временными файлами
нужно занести их в файл, например, в виде масок или точных имён файлов в ".gitignore" --- файл в корневом каталоге

** интерактивное добавление
если произошли кардинальные модификации и изменилось, например, несколько функций.
однако коммиты (фиксации) желательно делать небольшими.
можно добавлять сперва одну порцию изменений при помощи
git add --interactive
сделать коммит и уже потом добавить остальное и снова сделать коммит

** подправить прошлый коммит
если оказалось что какие-нибудь файлы не попали в коммит или описание коммита случайно оказалось с ошибкой --- это можно исправить
(осторожно! исправление нарушит временные метки и хеш-сумму последнего коммита (потому что заменит старый коммит новым)):
добавить/удалить файлы и сделать:
git commit --amend

** создать ветку для тестовых изменений (ветка только создастся, но git неё сам не перейдёт)
git branch test_123

** посмотреть список существующих веток
git branch

** перейти в желаемую ветку
git checkout test_123

** когда изменения в тестовой ветке стабилизируются, можно её слить (склеить) с основной веткой master:
в первое время обязательно сделать резервную копию! (git может разворотить весь репозиторий если дать ему на это команду merge, rebase, ...)
git checkout master
git merge test_123
если изменения были линейными, то git напишет "fast-forward" --- то есть git просто передвинет указатель master на ветку test_123

** если не хочется fast-forward (изменения линейны но хочется странного)
git merge --no-commit --no-ff test_123

** если возник конфликт (один и тот же файл отредактировался в разных ветках),
то потребуется mergetool: специальная программа которая предоставит возможность исправить или выбрать необходимый вариант
запустится текстовый редактор с тремя (обычно) колонками.
git mergetool

** удаление ветки
после слияния (склейки) ветка test_123 и ветка master указывают на одно и то же место и поэтому, скорее всего, ветка test_123 уже больше не нужна и её лучше удалить
git branch -d test_123

** отправить на сервер всё
git push --all

** забрать с сервера
git fetch

** забрать с сервера и склеить (merge)
git pull

** скопировать со стороннего сервера весь репозиторий
git clone 'https://github.com/user/repository-address.git'



** а дальше
читать https://git-scm.com/book/ru/v2
или продолжить тут, а потом всё равно
читать https://git-scm.com/book/ru/v2

* Начало работы

Так как все действия делаются от имени определённого человека, то
имя автора должно быть зафиксировано в пользовательских настройках:

#+BEGIN_SRC bash
git config --global user.name "Ivanoff Peter Sidorovich"
git config --global user.email ips@example.org
#+END_SRC

либо в настройках конкретного проекта:

#+BEGIN_SRC bash
git config          user.name "Ivanoff Peter Sidorovich"
git config          user.email ips@example.org
#+END_SRC

Можно подправить вручную в текстовом файле:
- настроек пользователя
#+BEGIN_SRC bash
~/.gitconfig
#+END_SRC
- настроек проекта
#+BEGIN_SRC bash
путь/до/вашего/проекта/.git/config
#+END_SRC

* Создание репозитория
В начале выбираем название проекта. Далее в тексте фигурирует название
каталога для проектов "project" и название инновационного проекта по
разработке "velocipede". Вам необходимо придумать собственное
название.

Необходимо создать каталог проекта
#+BEGIN_SRC bash 
mkdir velocipede
#+END_SRC

и перейти в него
#+BEGIN_SRC bash
cd velocipede
#+END_SRC


* Инициализация репозитория
#+BEGIN_SRC bash
git init
#+END_SRC

Внутри каталога с проектом будет создан каталог ".git" с
инфраструктурой репозитория.

* Добавление файлов в репозиторий

После команды "git add" следует список добавляемых файлов разделённых
пробелами
#+BEGIN_SRC bash
git add          list.txt   of.org   my/files.txt
#+END_SRC

Пожалуйста, не делайте так (как минимум до тех пор, пока не создадите
~/.gitignore_global и path/to/project/.gitignore):
#+BEGIN_SRC bash
git add .
git add *
git add **/*
#+END_SRC


* Желательные файлы
** Описание проекта
Простой текстовый файл содержащий краткое описание проекта.
*** Название файла может варьироваться: 
- README
- README.txt
- README.md
- README.org

*** Текстовый файл обычно содержит:
- описание самого файла
- копирайт год и имя автора
- подробности (e-mail) об авторе или авторах
- название лицензии под которой распространяется проект
- ключевые слова
- краткое описание проекта
- краткий способ сборки, запуска или просмотра
- история проекта
- зависимости (например для программы - используемые библиотеки)

*** Пример

(в примере используется лицензия GPL)

#+BEGIN_SRC bash
README.org --- описание проекта

Copyright (C) 2012 Ivanoff Peter Sidorovich

Автор: Ivanoff Peter Sidorovich <ips@example.org>

  This file is part of velocipede.

  velocipede is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  velocipede is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with velocipede.  If not, see <http://www.gnu.org/licenses/>.



 * Ключевые слова:

   велосипед колесо быстрое перемещение пространство



 * Описание:

   Разработка уникального проекта по созданию невиданного ранее
   устройства осуществляющего перемещение человека из пункта А в пункт
   Б, затрачивая при этом только одну ложку борща на километр пути.



 * Использование:

   просто используйте это так:
   a) в пункте А сядьте на велосипед
   b) задайте направление рулём на пункт В
   c) дрыгайте ножками, пока не почувствуете усталость (ложка борща)
   d) если не достигли пункта В перейдите к пункту b
   e) через некоторое время вы попадёте в пункт B



 * История:

   Проект создан 3015-05-19



 * Зависимости:

   - Набор "Юный велосипедостроитель" из ближайшего магазина
   - Синяя липкая лента
#+END_SRC

** Полный текст лицензионного соглашения
*** Название файла может варьироваться: 
- COPYING
- COPYING.txt
- COPYING.md
- COPYING.org
*** Типы лицензии
(перечислены только наиболее распространённые)
- /BSD/ Свободное программное обеспечение. Делайте с программой что
  хотите: запускайте, изучайте, копируйте, изменяйте, распространяйте,
  продавайте. Но оставьте информацию об авторе и о том, что автор не
  несёт никакой ответственности и ничего не гарантирует.
- /GNU GPL/ Свободное программное обеспечение. Делайте с программой
  что хотите: запускайте, изучайте, копируйте, изменяйте,
  распространяйте, продавайте. Но оставьте информацию об авторе и о
  том, что автор не несёт никакой ответственности и ничего не
  гарантирует. Также сохраните лицензию GPL на программу и её
  реинкарнации (форки).
- /Creative Commons/ Например: CC-BY-SA
  (https://creativecommons.org/licenses/by-sa/4.0/deed.ru)
  Для любых произведений (фотографий, рисунков, текстов, ...)
- /EULA/ (проприетарное лицензионное соглашение с конечным
  пользователем) - договор между владельцем (автором) компьютерной
  программы и +рабом+ пользователем её копии. В случае EULA,
  необходимо привести полный текст лицензии:
  
  Студенту, желающему сдать работу и выбравшему в качестве лицензии
  EULA, требуется написать конечное соглашение пользователя в котором
  для примера, но не для бездумного копирования, используется в
  качестве основы следующее описание: в котором описываются
  ограничения включающие, но не ограничивающиеся, запрещением
  просмотра исходного кода и его изучения (только под NDA - соглашение
  о неразглашении продажи бессмертной души), запрещение
  распространения, запрещение несанкционированного и несогласованного
  с высшим руководством запуска программы, запрещение продажи без
  покупки дистрибьюторских прав, банальные зонды и прочие соглашения
  почти не нарушающие конституцию и права человека, если будет
  доказано, что пользователь действительно и неоспоримо на момент
  заключения договора и в течении всего времени на которое
  распространяется действие договора, являлся человеком, причём без
  возможности получения прямой либо косвенной выгоды, в том числе либо
  материальной либо нематериальной выгоды, включая использование
  данного соглашения без изменения его сути и содержания,
  ограничиваясь только 10 (десятью) страницами мелкого, трудно
  читаемого текста.





* Запись изменений

Для того чтобы сохранить (зафиксировать, закоммитить, разместить, запечатлеть)
изменения внутри репозитория необходимо использовать команду:
#+BEGIN_SRC bash
git commit -m "описание коммита"
#+END_SRC

либо для добавления более подробного описания:
#+BEGIN_SRC bash
git commit
#+END_SRC




* Метки

Метки позволяют отметить важные моменты в истории проекта

Просмотр списка меток
#+BEGIN_SRC bash
git tag
#+END_SRC

Просмотр свойств метки
#+BEGIN_SRC bash
git show simple_label
#+END_SRC

** Простые метки
#+BEGIN_SRC bash
git tag sipmple_label
#+END_SRC

** Аннотированные метки
#+BEGIN_SRC bash
git tag -a label_v1 -m 'description for v1'
#+END_SRC

** Подписанные метки
#+BEGIN_SRC bash
git tag -s v2 -m 'signed tag for v2'
#+END_SRC



* Создание ветки
Для создания ветки используйте команду (вместо "test" укажите название
создаваемой ветки):
#+BEGIN_SRC bash
git branch test
#+END_SRC

После этого вы всё ещё находитесь в предыдущей ветке (скорее всего в
ветке по умолчанию "master")

Чтобы перейти в ветку с названием "test" сделайте
#+BEGIN_SRC bash
git checkout test
#+END_SRC


Следующая команда объединяет две предыдущие (создать ветку и перейти в неё) 
#+BEGIN_SRC bash
git checkout -b test
#+END_SRC


* Просмотр дерева

в терминале
#+BEGIN_SRC bash
git log --oneline --abbrev-commit --all --graph --decorate --color
#+END_SRC

графическая версия (с опцией "--all" показывает все ветви;
--date-order сортирует коммиты по времени)
#+BEGIN_SRC bash
gitk --all --date-order
#+END_SRC


* веб-сервис для хостинга проектов
(рассмотрено на примере github.com)

Запомните у вас будет два пароля: один для вэб-сайта github.com,
другой для работы через ssh.



** Генерация ssh ключей
Генерация ключей в альтернативной операционной системе рассмотрена на
сайте [[http://habrahabr.ru/post/125799/][Как начать работать с GitHub: быстрый старт]].


(оригинальный текст https://help.github.com/articles/generating-ssh-keys/)
Рассматривается Linux версия: все пункты выполняются в терминале.
*** Шаг 1: проверка SSH ключей

#+BEGIN_SRC bash
ls -al ~/.ssh
#+END_SRC

Скорее всего получится такой список:
- id_dsa.pub
- id_ecdsa.pub
- id_ed25519.pub
- id_rsa.pub
*** Шаг 3: генерация новых ключей
Укажите свой e-mail (тот который использовался при регистрации или
если изменился адрес, то указанный в настройках профиля github.com):

#+BEGIN_SRC bash
ssh-keygen -t rsa -C "your_email@example.com"
#+END_SRC

На предложение указать файл:
#+BEGIN_SRC bash
Enter file in which to save the key (/home/you/.ssh/id_rsa): 
#+END_SRC
строго рекомендуется оставить значение по умолчанию и нажать Enter:


Далее вас попросят ввести пароль дважды (это не пароль для github.com
это другой пароль; пароль должен быть сложным, можно воспользоваться
генератором паролей "pwgen"). Запомните пароль: он вам понадобится для
работы через ssh.

В итоге вам выдадут отпечаток ключа который выглядит примерно так:
#+BEGIN_SRC bash
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
#+END_SRC

*** Шаг 3: добавление ключа к ssh-агенту
Проверьте что ssh-агент запущен
#+BEGIN_SRC bash
eval "$(ssh-agent -s)"
#+END_SRC

должно появиться что-то типа
#+BEGIN_SRC bash
Agent pid 59566
#+END_SRC

добавление ключа к агенту
#+BEGIN_SRC bash
ssh-add ~/.ssh/id_rsa
#+END_SRC

*** Шаг 4: добавление ssh-ключа к аккаунту на сайте
скопируйте ключ (он может называться id_rsa.pub, id_dsa.pub,
id_ecdsa.pub или id_ed25519.pub):
#+BEGIN_SRC bash
cat ~/.ssh/id_rsa.pub
#+END_SRC
*Важно* скопировать ключ без добавления лишних пробелов и переводов
строки!

В разделе [[https://github.com/settings/profile][ настроек * (шестерёнка)]] выбрать подраздел [[https://github.com/settings/ssh][SSH keys]] и
добавить ключ ssh (кнопка "Add SSH key").

Вставьте скопированный ранее ключ и нажмите зелёную кнопку "Add key",
после чего подтвердите подлинность себя и ваши действия вашим паролем
от github.com

*** Шаг 5: проверка
#+BEGIN_SRC bash
ssh -T git@github.com
#+END_SRC

Возможно появится предупреждение:
#+BEGIN_SRC bash
The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?
#+END_SRC

Если вы уверены в совпадении отпечатка ключа то наберите слово "yes" целиком. Если не получилось то вам поможет [[https://help.github.com/articles/error-agent-admitted-failure-to-sign][решение]].

*** Шаг 6: безопасность
Никому не показывайте ssh ключи. Если вы работаете не на своём
компьютере (что очень странно), то скопируйте на флэшку каталог с
ключами "~/.ssh" и удалите его с этого компьютера полностью (уж точно
не в корзину). И вообще лучше не хранить пароли и ключи на чужих
компьютерах (указывайте путь к флэшке).

После работы очистите менеджер копирования (Clipboard Manager,
например Parcellite) от копий ключей которые вы копировали.



* Совместная работа

Чтобы посмотреть список удалённых репозиториев выполните команду
#+BEGIN_SRC bash
git remote -v
#+END_SRC

Под именем *origin* находится ваш основной репозиторий


Для добавления удалённого репозитория:
#+BEGIN_SRC bash
git remote add frk git://github.com/username/fork-of-project.git
#+END_SRC
теперь под тот удалённый реопзиторий виден под именем "frk"


** Со стороны работника
- Fork it (форкни его): создайте копию проекта у себя и загрузите
  проект на компьютер (git clone git://github.com/username/project-name.git; cd project-name)
- Создайте новую ветку (git branch my-new-feature;
  git checkout my-new-feature)
- Запечатлетние изменений (git commit -m 'Add some feature')
- Заливка на сервер получившейся ветки (git push origin my-new-feature)
- Cоздайте "Pull Request"




** Со стороны лидера проекта
Лидер проекта - обычно первоначальный автор проекта, но это не
обязательно так. В данный момент это человек который принимает
исправления (pull request) и объединяет их с основной веткой проекта.

*** используя браузер:
пример с картинками: [[https://guides.github.com/activities/hello-world/][Learn Git and GitHub without any code]]
- выбрать в колонке справа "Pull requests"
- из предложенного списка выбрать нужный запрос на слияние
- внизу нажать кнопку "Merge pull requests", ввести комментарий,
  нажать "Confirm merge"


- если ветка "my-new-feature" больше не нужна, создатель ветки
  "my-new-feature" может её удалить кнопкой "Delete branch"



